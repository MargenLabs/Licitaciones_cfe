name: CFE Scraper

on:
  schedule:
    - cron: '0 15,19,23 * * *'   # ejecuta en horarios UTC (8am, 12pm y 4pm de Tijuana) 
  workflow_dispatch:      # permite lanzarlo manualmente

jobs:
  run-scraper:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install --no-cache-dir -r requirements.txt

      # Si usas Selenium + Chrome/Chromedriver:
      - name: Install Chromium
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: 'latest'

      - name: Install Chromedriver
        uses: nanasess/setup-chromedriver@v2

      # ── Simula un cambio en state.json ──────────────────────────────────────
      - name: Simulate state.json change
        run: |
          python3 <<'EOF'
import json, os

# Si no existe, crea un JSON vacío
if not os.path.exists("state.json"):
    s = {}
else:
    s = json.load(open("state.json"))

# Simula modificación: fuerza un cambio en alguna licitación
if "CFE-0201" in s:
    s["CFE-0201"]["estado"] = "PruebaGitHub"
else:
    # Si está vacío o usa otra clave, añade una de ejemplo
    s["CFE-0201"] = {"estado": "PruebaGitHub"}

# Guarda el state.json simulado
with open("state.json", "w") as f:
    json.dump(s, f, indent=2)
EOF

      - name: Run scraper
        env:
          TELEGRAM_TOKEN:   ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: python scraper_cfe.py
